 # CloudAcademy Next.js Project - Configuration & Development Guide

  ## Current Setup & Configuration

  ### Tailwind CSS v4 Configuration
  - **Version**: TailwindCSS v4.1.10
  - **PostCSS Plugin**: `@tailwindcss/postcss` (required for v4)
  - **CSS Import**: Uses `@import "tailwindcss";` instead of separate
  `@tailwind` directives

  **Key Files:**
  - `postcss.config.js`: Uses `'@tailwindcss/postcss': {}` plugin
  - `styles/globals.css`: Imports Tailwind with `@import "tailwindcss";`
  - `tailwind.config.js`: Standard v4 config with content paths for pages
  and components

  ### Project Structure
  app/
  ├── pages/           # Next.js pages (file-based routing)
  ├── components/      # Reusable React components
  ├── styles/          # Global CSS and Tailwind
  ├── public/          # Static assets
  └── next.config.js   # Next.js configuration

  ## Creating New Pages

  ### Basic Page Creation
  1. Create file in `pages/` directory (e.g., `pages/about.tsx`)
  2. Export default React component
  3. Use Tailwind classes for styling

  **Example:**
  ```tsx
  export default function About() {
    return (
      <div className="min-h-screen bg-gray-50 p-8">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-4xl font-bold text-gray-900 mb-6">About
  Us</h1>
          <p className="text-lg text-gray-600">Page content here...</p>
        </div>
      </div>
    );
  }

  Dynamic Routes

  - pages/blog/[slug].tsx → /blog/any-slug
  - pages/users/[id].tsx → /users/123

  Authentication & Private Pages

  AWS Amplify Setup (if using Amplify)

  The project appears to use AWS Amplify UI React. For private pages:

  import { withAuthenticator } from '@aws-amplify/ui-react';

  function PrivatePage() {
    return (
      <div className="min-h-screen bg-gray-50">
        <h1 className="text-3xl font-bold">Private Content</h1>
      </div>
    );
  }

  export default withAuthenticator(PrivatePage);

  Manual Auth Check Pattern

  import { useEffect, useState } from 'react';
  import { useRouter } from 'next/router';

  export default function PrivatePage() {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const router = useRouter();

    useEffect(() => {
      // Check auth status
      const checkAuth = async () => {
        // Your auth logic here
        const authStatus = await checkUserAuth();
        if (!authStatus) {
          router.push('/login');
        } else {
          setIsAuthenticated(true);
        }
      };
      checkAuth();
    }, [router]);

    if (!isAuthenticated) {
      return <div className="flex justify-center items-center 
  min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 
  border-blue-500"></div>
      </div>;
    }

    return (
      <div className="min-h-screen bg-gray-50 p-8">
        {/* Private content */}
      </div>
    );
  }

  CSS & Styling Best Practices

  Tailwind CSS v4 Usage

  - Use utility classes: bg-blue-500, text-white, p-4, etc.
  - Responsive design: md:text-lg, lg:grid-cols-3
  - Custom styles in styles/globals.css if needed

  Component Styling Pattern

  const Button = ({ variant = 'primary', children, ...props }) => {
    const baseClasses = 'px-4 py-2 rounded-lg font-medium 
  transition-colors';
    const variants = {
      primary: 'bg-blue-600 text-white hover:bg-blue-700',
      secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
    };

    return (
      <button 
        className={`${baseClasses} ${variants[variant]}`}
        {...props}
      >
        {children}
      </button>
    );
  };

  Development Commands

  npm run dev        # Start development server
  npm run build      # Build for production
  npm run start      # Start production server
  npm run lint       # Run ESLint (if configured)

  Important Notes

  1. Never uninstall @tailwindcss/postcss - Required for Tailwind v4
  2. CSS Import Syntax: Use @import "tailwindcss"; not @tailwind directives
  3. File-based Routing: Pages in pages/ directory automatically become
  routes
  4. Image Optimization: Use Next.js Image component for better performance
  5. Environment Variables: Store in .env.local (already configured)

  Current Git Status

  - Branch: tail2
  - Main branch: main
  - Modified files include Tailwind configuration and styling setup

  Next Steps for Development

  1. Create reusable components in components/ directory
  2. Set up proper authentication flow
  3. Add error boundaries and loading states
  4. Configure any necessary API routes in pages/api/
  5. Add proper TypeScript types if using TypeScript


